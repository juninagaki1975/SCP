#!/usr/bin/env python3
#
# By JDY 
# 24AUG2020
# AI-mat workshopped :)
# Jun 2023.10.17 customized to module
#

import sys,os,re,glob
import datetime as dt
import numpy as np
import matplotlib.pyplot as plt
import subprocess as sp

__all__ = ['write_xsf','read_xsf']

def write_xsf(fname,primvec,convvec,natom,symbol,atomcoord, \
        grids,origin,span,data):

    g = open("out_"+fname,"w")

    g.write("# Generated by pySCP \n")
    g.write("# "+str(dt.datetime.now())+"\n")

    g.write("CRYSTAL\n")
    g.write("PRIMVEC\n")
    for i in range(3):
        g.write(str(primvec[i,0])+" "+str(primvec[i,1])+" "+str(primvec[i,2])+"\n")

    g.write("CONVVEC\n")
    for i in range(3):
        g.write(str(convvec[i,0])+" "+str(convvec[i,1])+" "+str(convvec[i,2])+"\n")

    g.write("PRIMCOORD\n")
    g.write(str(natom)+" 1\n")

    for i in range(natom):
        g.write(symbol[i]+" "+str(atomcoord[i,0])+" "+str(atomcoord[i,1])+" " + \
                str(atomcoord[i,2])+"\n")

    g.write("BEGIN_BLOCK_DATAGRID_3D\n")
    g.write("3D_field\n")
    g.write("BEGIN_DATAGRID_3D_UNKNOWN\n")
    g.write(str(grids[0])+" "+str(grids[1])+" "+str(grids[2])+"\n")
    g.write(str(origin[0])+" "+str(origin[1])+" "+str(origin[2])+"\n")

    for i in range(3):
        g.write(str(span[i,0])+" "+str(span[i,1])+" "+str(span[i,2])+"\n")

    nn = grids[0]*grids[1]*grids[2]
    nl = nn // 6
    nmod = nn % 6
    dat = np.zeros((nn))

    n = 0
    for k in range(grids[2]):
        for j in range(grids[1]):
            for i in range(grids[0]):
                dat[n] = data[i,j,k]
                n += 1

    n = 0
    for i in range(nl-1):
        for j in range(5):
            g.write(str(dat[n])+" ")
            n += 1
        g.write(str(dat[n])+"\n")
        n += 1
    for i in range(nmod-1):
        g.write(str(dat[n])+"  ")
        n += 1
    g.write(str(dat[n])+"\n")
    g.write("END_DATAGRID_3D\n")
    g.write("END_BLOCK_DATAGRID_3D\n")

    g.close()

    return

def read_xsf(fname):

    primvec = np.zeros((3,3))
    convvec = np.zeros((3,3))
    natom = 0

    f = open(fname,"r")
    lines = f.readlines()
    cnt = len(lines)

    grids = np.zeros((3)).astype(int)
    origin = np.zeros((3)).astype(float)
    span = np.zeros((3,3)).astype(float)
    primvec = np.zeros((3,3)).astype(float)
    convvec = np.zeros((3,3)).astype(float)

# check contents.
    n = 0
    chk = 0
    while chk < 4:
        tmp = lines[n].split()
        if "PRIMVEC" in tmp:
            start_primvec = n
            lprimvec = True
            chk += 1
        if "CONVVEC" in tmp:
            start_convvec = n
            lconvvec = True
            chk += 1
        if "PRIMCOORD" in tmp:
            start_primcoord = n
            lprimcoord = True
            tmp2 = lines[n+1].split()
            natom = int(tmp2[0])
            chk += 1
        if "BEGIN_BLOCK_DATAGRID_3D" in tmp:
            start_datagrid = n
            ldatagrid = True
            chk += 1
        n += 1

# primvec            
    for j in range(3):
        tmp2 = lines[start_primvec+1+j].split()
        for i in range(3):
            primvec[i,j] = tmp2[i]
# convvec            
    for j in range(3):
        tmp2 = lines[start_convvec+1+j].split()
        for i in range(3):
            convvec[i,j] = tmp2[i]
# grids            
    tmp2 = lines[start_datagrid+3].split()
    grids = [int(tmp2[j]) for j in range(3)]
# origin
    tmp2 = lines[start_datagrid+4].split()
    origin = [float(tmp2[j]) for j in range(3)]
# span
    for j in range(3):
        tmp2 = lines[start_datagrid+5+j].split()
        for i in range(3):
            span[i,j] = tmp2[i]

# atom coord.
    symbol = []
    atomcoord = np.zeros((natom,3))
    n = start_primcoord+2
    for i in range(natom):
        tmp2 = lines[n].split()
        symbol.append(tmp2[0])
        atomcoord[i,:] = [float(tmp2[j]) for j in range(1,4)]
        n += 1

    tmp3 = []
    nn = grids[0]*grids[1]*grids[2]
    nl = nn // 6
    nmod = nn % 6

    m = 0
    n = start_datagrid + 8
    for i in range(nl):
        dat = lines[n].split()
        for j in range(6):
            tmp3.append(dat[j])
            m+=1
        n+=1
    dat = lines[n].split()
    for i in range(nmod):
        tmp3.append(dat[i])
        m+=1

    tmpdat = np.array(tmp3).astype(float)
    data = np.zeros((grids[0],grids[1],grids[2]))

    n = 0
    for k in range(grids[2]):
        for j in range(grids[1]):
            for i in range(grids[0]):
                data[i,j,k] = tmpdat[n]
                n += 1

    return primvec,convvec,grids,origin,span,symbol,natom,atomcoord,data


if __name__=="__main__":

    xsf = read_xsf(sys.argv[1])


